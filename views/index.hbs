{{#section 'head'}}
    <title>Chat</title>
    <style>
        * { margin:0; padding:0; box-sizing:border-box;}
        body { font: 13px Helvetica, Arial; }
        form { background: #000; padding: 3px; position: fixed; bottom: 0; width: 100%; }
        form input { border: 0; padding: 10px; width: 90%; margin-right: .5%; }
        form button { width: 9%; background: rgb(130, 224, 255); border: none; padding: 10px; }
        #messages { list-style-type: none; margin: 0; padding: 0; }
        #messages li { padding: 5px 10px; }
        #messages li:nth-child(odd) { background: #eee; }
    </style>
{{/section}}

<div><input type="text" id="passw-encr" value="This is not the password" /></div>
<div><input type="text" id="username" value="Username" /></div>
<ul id="messages"></ul>
<form action="">
    <input id="m" autocomplete="off" /><button id="btn">Send</button>
</form>

{{#section 'scripts'}}
    <script type="text/javascript" src="https://cdn.rawgit.com/ricmoo/aes-js/e27b99df/index.js"></script>
    <script src="https://cdn.socket.io/socket.io-1.4.8.js"></script>
    <script src="/javascripts/sha256.min.js"></script>
    <script>
        var socket = io();

        var minLen = 128;

        var body = $('html, body');
        var message = $('#m');
        var messages = $('#messages');
        var username = $('#username');

        var pass = $('#passw-encr');

        $('#btn').on('click', function(event) {
            event.preventDefault();

            var txt = message.val();
            if (txt.length < 1) return false;


            var msg = encrypt(txt, pass.val());
            var usr = encrypt(username.val(), pass.val());

            socket.emit('chat message', {
                msg: msg,
                usr: usr,
            });

            message.val('');
            return false;
        });

        socket.on('chat message', function(obj) {

            var msg = decrypt(obj.msg, pass.val());
            var usr = decrypt(obj.usr, pass.val());
            var newMsg = $('<li>');
            messages.append(newMsg.text(
                    usr + '> ' + msg
            ));

            body.scrollTop(newMsg.offset().top);
        });

        socket.emit('new user');
        socket.on('new user', function() {
            var newMsg = $('<li>');
            messages.append(newMsg.text('A new user is online'));
            body.scrollTop(newMsg.offset().top);
        });

        function rndString(len) {
            var chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
            var s = '';
            if (len < 1) return '0';

            for (var i = 0; i != len; ++i)
                s += chars[Math.round(Math.random() * (chars.length - 1))];
            return s;
        }

        function encrypt(str, pass) {
            var key = aesjs.utils.hex.toBytes(sha256(pass));

            var aesCtr = new aesjs.ModeOfOperation.ctr(key, new aesjs.Counter());

            var len = str.length;
            if (str.length < minLen)
                str = str + rndString(minLen - str.length);
            var msg = aesjs.utils.hex.fromBytes(aesCtr.encrypt(aesjs.utils.utf8.toBytes(str)));

            return {
                len: len,
                msg: msg,
            }
        }

        function decrypt(obj, pass) {
            var key = aesjs.utils.hex.toBytes(sha256(pass));

            var aesCtr = new aesjs.ModeOfOperation.ctr(key, new aesjs.Counter());

            var str = aesjs.utils.utf8.fromBytes(aesCtr.decrypt(aesjs.utils.hex.toBytes(obj.msg)));
            if (str.length != obj.len)
                str = str.substr(0, obj.len);
            return str;
        }
    </script>
{{/section}}